/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type ConditionsObservation struct {
}

type ConditionsParameters struct {

	// User defined value that will be compared with alert field according to the operation. Default value is empty string
	// +kubebuilder:validation:Optional
	ExpectedValue *string `json:"expectedValue,omitempty" tf:"expected_value,omitempty"`

	// +kubebuilder:validation:Required
	Field *string `json:"field" tf:"field,omitempty"`

	// If 'field' is set as 'extra-properties', key could be used for key-value pair
	// +kubebuilder:validation:Optional
	Key *string `json:"key,omitempty" tf:"key,omitempty"`

	// Indicates behaviour of the given operation. Default value is false
	// +kubebuilder:validation:Optional
	Not *bool `json:"not,omitempty" tf:"not,omitempty"`

	// +kubebuilder:validation:Required
	Operation *string `json:"operation" tf:"operation,omitempty"`
}

type IncidentPropertiesObservation struct {
}

type IncidentPropertiesParameters struct {

	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// +kubebuilder:validation:Optional
	Details map[string]*string `json:"details,omitempty" tf:"details,omitempty"`

	// +kubebuilder:validation:Required
	Message *string `json:"message" tf:"message,omitempty"`

	// +kubebuilder:validation:Required
	Priority *string `json:"priority" tf:"priority,omitempty"`

	// +kubebuilder:validation:Required
	StakeholderProperties []StakeholderPropertiesParameters `json:"stakeholderProperties" tf:"stakeholder_properties,omitempty"`

	// +kubebuilder:validation:Optional
	Tags []*string `json:"tags,omitempty" tf:"tags,omitempty"`
}

type IncidentRuleIncidentRuleObservation struct {
}

type IncidentRuleIncidentRuleParameters struct {

	// +kubebuilder:validation:Optional
	ConditionMatchType *string `json:"conditionMatchType,omitempty" tf:"condition_match_type,omitempty"`

	// +kubebuilder:validation:Optional
	Conditions []ConditionsParameters `json:"conditions,omitempty" tf:"conditions,omitempty"`

	// +kubebuilder:validation:Required
	IncidentProperties []IncidentPropertiesParameters `json:"incidentProperties" tf:"incident_properties,omitempty"`
}

type IncidentRuleObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type IncidentRuleParameters struct {

	// +kubebuilder:validation:Required
	IncidentRule []IncidentRuleIncidentRuleParameters `json:"incidentRule" tf:"incident_rule,omitempty"`

	// +kubebuilder:validation:Required
	ServiceID *string `json:"serviceId" tf:"service_id,omitempty"`
}

type StakeholderPropertiesObservation struct {
}

type StakeholderPropertiesParameters struct {

	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// +kubebuilder:validation:Optional
	Enable *bool `json:"enable,omitempty" tf:"enable,omitempty"`

	// +kubebuilder:validation:Required
	Message *string `json:"message" tf:"message,omitempty"`
}

// IncidentRuleSpec defines the desired state of IncidentRule
type IncidentRuleSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     IncidentRuleParameters `json:"forProvider"`
}

// IncidentRuleStatus defines the observed state of IncidentRule.
type IncidentRuleStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        IncidentRuleObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// IncidentRule is the Schema for the IncidentRules API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,opsgenie-providerjet}
type IncidentRule struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              IncidentRuleSpec   `json:"spec"`
	Status            IncidentRuleStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// IncidentRuleList contains a list of IncidentRules
type IncidentRuleList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []IncidentRule `json:"items"`
}

// Repository type metadata.
var (
	IncidentRule_Kind             = "IncidentRule"
	IncidentRule_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: IncidentRule_Kind}.String()
	IncidentRule_KindAPIVersion   = IncidentRule_Kind + "." + CRDGroupVersion.String()
	IncidentRule_GroupVersionKind = CRDGroupVersion.WithKind(IncidentRule_Kind)
)

func init() {
	SchemeBuilder.Register(&IncidentRule{}, &IncidentRuleList{})
}
