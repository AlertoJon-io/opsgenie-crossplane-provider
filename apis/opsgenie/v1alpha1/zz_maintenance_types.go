/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type EntityObservation struct {
}

type EntityParameters struct {

	// +kubebuilder:validation:Optional
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// +kubebuilder:validation:Optional
	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type MaintenanceObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type MaintenanceParameters struct {

	// +kubebuilder:validation:Required
	Description *string `json:"description" tf:"description,omitempty"`

	// +kubebuilder:validation:Required
	Rules []MaintenanceRulesParameters `json:"rules" tf:"rules,omitempty"`

	// +kubebuilder:validation:Optional
	Time []TimeParameters `json:"time,omitempty" tf:"time,omitempty"`
}

type MaintenanceRulesObservation struct {
}

type MaintenanceRulesParameters struct {

	// +kubebuilder:validation:Required
	Entity []EntityParameters `json:"entity" tf:"entity,omitempty"`

	// +kubebuilder:validation:Optional
	State *string `json:"state,omitempty" tf:"state,omitempty"`
}

type TimeObservation struct {
}

type TimeParameters struct {

	// +kubebuilder:validation:Optional
	EndDate *string `json:"endDate,omitempty" tf:"end_date,omitempty"`

	// +kubebuilder:validation:Optional
	StartDate *string `json:"startDate,omitempty" tf:"start_date,omitempty"`

	// +kubebuilder:validation:Required
	Type *string `json:"type" tf:"type,omitempty"`
}

// MaintenanceSpec defines the desired state of Maintenance
type MaintenanceSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     MaintenanceParameters `json:"forProvider"`
}

// MaintenanceStatus defines the observed state of Maintenance.
type MaintenanceStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        MaintenanceObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// Maintenance is the Schema for the Maintenances API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,opsgenie-providerjet}
type Maintenance struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              MaintenanceSpec   `json:"spec"`
	Status            MaintenanceStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// MaintenanceList contains a list of Maintenances
type MaintenanceList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Maintenance `json:"items"`
}

// Repository type metadata.
var (
	Maintenance_Kind             = "Maintenance"
	Maintenance_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Maintenance_Kind}.String()
	Maintenance_KindAPIVersion   = Maintenance_Kind + "." + CRDGroupVersion.String()
	Maintenance_GroupVersionKind = CRDGroupVersion.WithKind(Maintenance_Kind)
)

func init() {
	SchemeBuilder.Register(&Maintenance{}, &MaintenanceList{})
}
