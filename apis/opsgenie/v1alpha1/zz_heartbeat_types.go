/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type HeartbeatObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type HeartbeatParameters struct {

	// +kubebuilder:validation:Optional
	AlertMessage *string `json:"alertMessage,omitempty" tf:"alert_message,omitempty"`

	// +kubebuilder:validation:Optional
	AlertPriority *string `json:"alertPriority,omitempty" tf:"alert_priority,omitempty"`

	// +kubebuilder:validation:Optional
	AlertTags []*string `json:"alertTags,omitempty" tf:"alert_tags,omitempty"`

	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// +kubebuilder:validation:Required
	Enabled *bool `json:"enabled" tf:"enabled,omitempty"`

	// +kubebuilder:validation:Required
	Interval *float64 `json:"interval" tf:"interval,omitempty"`

	// +kubebuilder:validation:Required
	IntervalUnit *string `json:"intervalUnit" tf:"interval_unit,omitempty"`

	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// +kubebuilder:validation:Optional
	OwnerTeamID *string `json:"ownerTeamId,omitempty" tf:"owner_team_id,omitempty"`
}

// HeartbeatSpec defines the desired state of Heartbeat
type HeartbeatSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     HeartbeatParameters `json:"forProvider"`
}

// HeartbeatStatus defines the observed state of Heartbeat.
type HeartbeatStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        HeartbeatObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// Heartbeat is the Schema for the Heartbeats API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,opsgenie-providerjet}
type Heartbeat struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              HeartbeatSpec   `json:"spec"`
	Status            HeartbeatStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// HeartbeatList contains a list of Heartbeats
type HeartbeatList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Heartbeat `json:"items"`
}

// Repository type metadata.
var (
	Heartbeat_Kind             = "Heartbeat"
	Heartbeat_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Heartbeat_Kind}.String()
	Heartbeat_KindAPIVersion   = Heartbeat_Kind + "." + CRDGroupVersion.String()
	Heartbeat_GroupVersionKind = CRDGroupVersion.WithKind(Heartbeat_Kind)
)

func init() {
	SchemeBuilder.Register(&Heartbeat{}, &HeartbeatList{})
}
